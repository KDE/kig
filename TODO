* more or less urgently necessary

- document mathematical i18n strings, so that the translators have a
   clue about how to translate them !

* not too hard:

- When selecting an argument of a certain type, show something like
   "Select a vector", so that the user is not confused, looking for an
   object he can't find.

- add intersection type between arcs and the other objects.

- add ObjectType's to the ObjectTypeFactory automatically.

- make it possible to zoom to a very specific part of the screen,
   i.e. from (x0,y0) to (x1,y1)

- Python scripting: export cubics, improve existing API.

- add support for work with other measure units (cm, inches, etc...)
  than just pixels...

- add an option to change the name and description of a type in the
  "manage types" dialog..

- add an option to the objects popup to start a script object with the
  current object as first argument...

- implement cut, copy and paste for objects...

* harder:

- rework the ObjectConstructor and GUIAction stuff into something more
   general, and more clean.  See the comment for
   ObjectConstructor::constructMode().

- make the dialogs not pop up over the main window..

- make the scripting system work more like the macro system. Make it
  a way to define new object types that can be reused more than once,
  instead of making it just a way to add *one* object..

- support for more scripting languages than just python..

- fillable polygons/shapes..

- filters: more input filters, improve and activate Dr. Geo filter
  ( see filters/drgeo-filter-status.txt ) and Cabri filter, add the
  possibility to ignore errors on loading

* hard :

- figure out a way to allow the user to enable and disable certain
  features.  E.g. I have been asked to allow the user to limit himself
  to compass-ruler constructions..

- "export to *": add stuff like java applets, SVG documents, etc...

- koffice w/o OpenOffice.org support ?

- add another viewmode ( which would be completely orthogonal to the
  KigMode concept ), where you can more clearly see the dependencies
  in a figure.  Something with colours, numberings, and/or a tree-like
  text representation of the dependencies..

- add support for work via command line without GUI. Possible options
  and uses:
  -c, --convert <filename.ext> => Kig will convert the file in its own
  format and output the file <filename.kig>

- defined integrals, as a particular case of filled shapes...

* future ?
- there should be a way to link a figure to a (html?) file containing
   exercises.  Teachers would be able to create exercises for Kig.
   I'm thinking of doing this with HTML (& KHTML) + scripting ( but
   this is _distant_ future.. )
